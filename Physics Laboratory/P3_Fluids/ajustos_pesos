import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt 


x= [0,1,2,2,2,3,3,4,4,4,5,5,5,6,6,7,7,7,8,8,8,9,9,9,10,10,11,11,11,12,12,13,13,13,14,14,15,15,15,16,16,17,17,18,18,18,19,19,20,20,21,21,22,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,34,34,35,35,36,37,37,38,38,39,39,40,41,41,42,43,43,44,45,45,46,47,47,48,49,50,50,51,52,53,53,54,55,56,57,58,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,82,83,84,86,88,89,91,92,94,95,97,99,101,103,106,108,111,113,116,119,122,126,130,134,140,146,154,163,175,192,221]
y=[4.459,4.453,4.447,4.441,4.434,4.428,4.422,4.416,4.409,4.403,4.396,4.390,4.383,4.377,4.370,4.364,4.357,4.350,4.343,4.337,4.330,4.323,4.316,4.309,4.302,4.295,4.287,4.280,4.273,4.266,4.258,4.251,4.243,4.236,4.228,4.221,4.213,4.205,4.197,4.189,4.181,4.173,4.165,4.157,4.149,4.140,4.132,4.124,4.115,4.107,4.098,4.089,4.080,4.071,4.063,4.053,4.044,4.035,4.026,4.016,4.007,3.997,3.988,3.978,3.968,3.958,3.948,3.938,3.928,3.917,3.907,3.896,3.886,3.875,3.864,3.853,3.842,3.830,3.819,3.807,3.796,3.784,3.772,3.760,3.747,3.735,3.722,3.710,3.697,3.684,3.670,3.657,3.643,3.630,3.616,3.601,3.587,3.572,3.558,3.543,3.527,3.512,3.496,3.480,3.464,3.447,3.431,3.413,3.396,3.378,3.360,3.342,3.323,3.304,3.285,3.265,3.245,3.224,3.203,3.182,3.160,3.137,3.114,3.091,3.067,3.042,3.017,2.991,2.964,2.936,2.908,2.879,2.849,2.819,2.787,2.754,2.720,2.685,2.649,2.611,2.572,2.531,2.488,2.444,2.397,2.349,2.297,2.243,2.186,2.126,2.061,1.992,1.918,1.838,1.751,1.656,1.550,1.432,1.299,1.145,0.962,0.739,0.452,0.046,-0.647]

yerror

xerror= []
for i in yerror: 
	xerror.append(1)
#Sumatori de x_i:
sumax=0
for i in range(len(x)):
    sumax=sumax+x[i]


#Sumatori de x_i * y_i:
sumaxy=0
for i in range(len(x)):
    sumaxy=sumaxy+(x[i]*y[i])

#Sumatori de y_i
sumay=0
for i in range(len(x)):
    sumay=sumay+y[i]


#Sumatori de x_i^2
sumax2=0
for i in range(len(x)):
    sumax2=sumax2+(x[i])**2

def pesos(yerror):
    triangle= len(y)*sumax2-(sumax)**2
    B=(len(y)*sumaxy-sumax*sumay)/triangle
    w=[]
    for i in range(len(yerror)):
        w_i=1/((yerror[i])**2+(B*xerror[i])**2) #canviar xerror[i] per xerror si la incertesa és fixa
        w.append(w_i)
    return w

def ajustambpesos():
    w= pesos(yerror)
    #sumatori de wi*xi^2
    sumatoriwx2 = 0
    for i in range(len(yerror)):
        sumatoriwx2=sumatoriwx2+w[i]*((x[i])**2)
    #sumatori de w_i * y_i:
    sumatoriwy=0
    for i in range(len(yerror)):
        sumatoriwy= sumatoriwy+(w[i]*y[i])
    #sumatori de w_i * x_i:
    sumatoriwx=0
    for i in range(len(yerror)):
        sumatoriwx=sumatoriwx+(w[i]*x[i])
    #sumatori de w_i * x_i * y_i:
    sumatoriwxy=0
    for i in range(len(yerror)):
        sumatoriwxy=sumatoriwxy+(w[i]*x[i]*y[i])
    #sumatori de w_i
    sumatoriw=0
    for i in range(len(yerror)):
        sumatoriw=sumatoriw+w[i]
    triangle=(sumatoriw*sumatoriwx2)-(sumatoriwx)**2
    A=((sumatoriwx2*sumatoriwy)-(sumatoriwx*sumatoriwxy))/triangle
    sigma_A=np.sqrt(sumatoriwx2/triangle)
    B=((sumatoriw*sumatoriwxy)-(sumatoriwx*sumatoriwy))/triangle
    sigma_B=np.sqrt(sumatoriw/triangle)
    plt.errorbar(x, y, yerr=yerror, xerr=xerror,color="b",fmt='.',capsize=3)
    x_ajust=np.linspace(0,x[len(x)-1])#posar valor mes gran de x per que faja la recta mes llarga
    y_ajust=A+B*x_ajust
    plt.plot(x_ajust,y_ajust,"r",linestyle='dashed')
    plt.legend(('Ajust lineal', 'Mesures experimentals'), loc='upper right')
    plt.xlabel("$t [s]$")
    plt.ylabel("$\ln(\\theta(t)-\\theta_{\infty})$ [log(rad)]")
    plt.title("$\ln(\\theta(t)-\\theta_{\infty})$ vs t $(\Delta\Omega = +50\%)$")
   
    plt.show()
    print("'''''''AJUST AMB INCERTESES VARIABLES (PESOS)'''''''")
    print('A=',A)
    print('B=', B)
    print('sigma_A=', sigma_A)
    print('sigma_B=', sigma_B)
    print("El coeficient de correlació lineal és:", np.corrcoef(x,y)[0][1])

ajustambpesos()

